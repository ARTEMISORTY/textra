name: Rust Windows Build and Release
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: windows-latest
    if: contains(github.event.head_commit.message, 'release')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Build
      run: cargo build --release
    
    - name: Get latest tag
      id: get_tag
      run: |
        $TAG = git describe --tags --abbrev=0
        echo "TAG=$TAG" >> $env:GITHUB_OUTPUT
      shell: pwsh
    
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG: ${{ steps.get_tag.outputs.TAG }}
      run: |
        gh release create "$TAG" --title "Release $TAG" --notes "Release notes for $TAG"
      
    - name: Get Project Name
      id: get_project_name
      run: |
        $PROJECT_NAME = (Get-Content .\Cargo.toml | Select-String '^\s*name\s*=\s*"([^"]+)"').Matches.Groups[1].Value
        echo "PROJECT_NAME=$PROJECT_NAME" >> $env:GITHUB_OUTPUT
      shell: pwsh
    
    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG: ${{ steps.get_tag.outputs.TAG }}
        PROJECT_NAME: ${{ steps.get_project_name.outputs.PROJECT_NAME }}
      run: |
        gh release upload "$TAG" ".\target\release\$PROJECT_NAME.exe"