name: Textra Release

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  create-release:
    if: contains(github.event.head_commit.message, 'release')
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install Windows Target
        run: rustup target add x86_64-pc-windows-msvc

      - name: Build Rust Project for Windows
        run: cargo build --release --target x86_64-pc-windows-msvc --bin textra
        working-directory: ./src  # Adjust this to the correct path where Cargo.toml is located

      - name: Verify Binary File
        run: |
          EXE_PATH="./src/target/x86_64-pc-windows-msvc/release/textra.exe"
          if [ -f "$EXE_PATH" ]; then
            echo "Binary exists at $EXE_PATH"
            echo "File size:"
            ls -lh "$EXE_PATH"
          else
            echo "Binary does not exist at $EXE_PATH"
            exit 1
          fi

      - name: Custom Release Script
        shell: bash
        run: |
          # Create a release tag based on the current timestamp
          RELEASE_TAG="v$(date +'%Y.%m.%d.%H%M%S')"
          echo "Creating release with tag $RELEASE_TAG"
          
          # Create a GitHub release using the GitHub API
          API_JSON=$(printf '{"tag_name": "%s", "target_commitish": "master", "name": "textra ðŸš€ release %s", "draft": false, "prerelease": false}' $RELEASE_TAG $RELEASE_TAG)
          RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "$API_JSON" https://api.github.com/repos/${{ github.repository }}/releases)
          
          # Extract the upload URL from the API response
          UPLOAD_URL=$(echo "$RESPONSE" | jq -r .upload_url | sed -e "s/{?name,label}//")
          if [ "$UPLOAD_URL" == "null" ]; then
            echo "Failed to create release"
            exit 1
          fi
          
          # Upload the .exe file to the release
          EXE_PATH="./src/target/x86_64-pc-windows-msvc/release/textra.exe"  # Adjust this path if necessary
          if [ -f "$EXE_PATH" ]; then
            curl -s --data-binary @"$EXE_PATH" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              "$UPLOAD_URL?name=textra-windows.exe"
            echo "Release and upload completed successfully"
          else
            echo "Binary file not found, cannot upload."
            exit 1
          fi

      - name: Publish to crates.io
        run: cargo publish
        working-directory: ./src  # Adjust this to the correct path where Cargo.toml is located
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
